---
- hosts: localhost
  connection: local
  gather_facts: no

  vars:
    region: us-east-1
    key: ansible_for_aws_jonathan
    prefix: staging
    dbname: mydb
    username: dbadmin
    password: mypassword
  
  tasks:
    - name: get vpc id information
      command: "aws ec2 describe-vpcs --filters Name=tag:Name,Values={{ prefix }}_vpc" 
      register: vpc_info
      changed_when: False

    - name: set vpc id json information into variable
      set_fact: 
        vpc_info_json: "{{ vpc_info.stdout | from_json }}"
      changed_when: False

    - name: setup aws VPC id cli varables 
      set_fact: 
        VpcId: "{{ vpc_info_json.Vpcs[0].VpcId }}"
      when: vpc_info_json.Vpcs[0].VpcId is defined

    - name: get vpc subnet id for the both public Subnets
      command: 'aws ec2 describe-subnets --filters "Name=vpc-id,Values={{ VpcId }}" "Name=tag:Name,Values={{ prefix }}_subnet_public_*"'
      register: vpc_subnet_info
      changed_when: False

    - name: set vpc subnet id json information into variable
      set_fact: 
        vpc_subnet_info_json: "{{ vpc_subnet_info.stdout | from_json }}" 
      changed_when: False

    - name: setup subnet id cli varables 
      set_fact: 
        SubnetId0: "{{ vpc_subnet_info_json.Subnets[0].SubnetId }}"
        SubnetId1: "{{ vpc_subnet_info_json.Subnets[1].SubnetId }}"
      when: vpc_info_json.Vpcs[0].VpcId is defined

    - name: get sg info for DB
      command: 'aws ec2 describe-security-groups --filters "Name=group-name,Values={{ prefix }}_sg_web"'
      register: sg_web_info
      changed_when: False

    - name: set sg info json information into variable
      set_fact: 
        sg_web_info_json: "{{ sg_web_info.stdout | from_json }}"
      changed_when: False

    - name: setup aws VPC id cli varables 
      set_fact: 
        web_security_group_id: "{{ sg_web_info_json.SecurityGroups[0].GroupId }}"
      when: sg_web_info_json.SecurityGroups[0].GroupId is defined

    # Creates a ELB and assigns a list of public subnets for the web server groups
    - local_action:
        module: ec2_elb_lb
        state: present
        name: "{{ prefix }}-webserver-elb"
        security_group_ids: "{{ web_security_group_id }}"
        region: "{{ region }}"
        subnets:
          - "{{ SubnetId0 }}"
          - "{{ SubnetId1 }}"
        purge_subnets: yes
        cross_az_load_balancing: yes
        connection_draining_timeout: 60
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        health_check:
          ping_protocol: tcp
          ping_port: 80
          response_timeout: 5 # seconds
          interval: 30
          unhealthy_threshold: 2
          healthy_threshold: 10
      register: ec2_elbs    

    - name: get host information for webserver instances
      command: 'aws ec2 describe-instances --filters "Name=tag:Name,Values={{ prefix }}-webserver*" "Name=instance-state-name,Values=running"'
      register: webserver_info
      changed_when: False

    - name: set host json information into variable
      set_fact: 
        webserver_info_json: "{{ webserver_info.stdout | from_json }}"
      changed_when: False

    - name: setup webserver info to cli varables - instance_id
      set_fact: 
        InstanceId0: "{{ webserver_info_json.Reservations[0].Instances[0].InstanceId }}"
        InstanceId1: "{{ webserver_info_json.Reservations[1].Instances[0].InstanceId }}"
      when: webserver_info_json.Reservations[0].Instances[0] is defined

    - name: Instance Register 00
      local_action:
        module: ec2_elb
        instance_id: "{{ InstanceId0 }}"
        ec2_elbs: "{{ prefix }}-webserver-elb"
        region: "{{ region }}"
        state: 'present'

    - name: Instance Register 01
      local_action:
        module: ec2_elb
        instance_id: "{{ InstanceId1 }}"
        ec2_elbs: "{{ prefix }}-webserver-elb"
        region: "{{ region }}"
        state: 'present'