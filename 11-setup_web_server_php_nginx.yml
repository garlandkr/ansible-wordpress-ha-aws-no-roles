---
- hosts: localhost
  connection: local
  gather_facts: no

  vars:
    region: us-east-1
    key: ansible_for_aws_jonathan
    prefix: staging
    dbname: mydb
    username: dbadmin
    password: mypassword
  
  tasks:
    - name: get host information for webserver instances
      command: 'aws ec2 describe-instances --filters "Name=tag:Name,Values={{ prefix }}-webserver*" "Name=instance-state-name,Values=running"'
      register: webserver_info
      changed_when: False

    - name: set host json information into variable
      set_fact: 
        webserver_info_json: "{{ webserver_info.stdout | from_json }}"
      changed_when: False

    - name: setup webserver info to cli varables
      set_fact: 
        PublicIP0: "{{ webserver_info_json.Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicIp }}"
        PublicIP1: "{{ webserver_info_json.Reservations[1].Instances[0].NetworkInterfaces[0].Association.PublicIp }}"
      when: webserver_info_json.Reservations[0].Instances[0] is defined

    - name: Add new host to our inventory.
      add_host:
        name: "{{ PublicIP0 }}"
        groups: webservers_wp
      when: webserver_info_json.Reservations[0].Instances[0].NetworkInterfaces[0].Association.PublicIp is defined

    - name: Add new host to our inventory.
      add_host:
        name: "{{ PublicIP1 }}"
        groups: webservers_wp
      when: webserver_info_json.Reservations[1].Instances[0].NetworkInterfaces[0].Association.PublicIp is defined

- hosts: webservers_wp
  gather_facts: no
  remote_user: ubuntu
  sudo: yes

  vars:
    region: us-east-1
    key: ansible_for_aws_jonathan
    prefix: staging
    dbname: wordpress
    username: dbadmin
    password: mypassword

  tasks:
    - name: Wait for port 22 to become available.
      local_action: "wait_for port=22 host={{ inventory_hostname }}"

    - name: ping all hosts
      ping:

    - name: add repos for nginx
      # On Ubuntu target: add nginx stable repository from PPA and install its signing key.
      # On Debian target: adding PPA is not available, so it will fail immediately.
      apt_repository: repo='ppa:nginx/stable'    

    - name: install nginx
      apt: name=nginx state=present update_cache=yes

    - name: start nginx service
      service: name=nginx state=started

    - name: install hhvm gpg key
      apt_key: url=http://dl.hhvm.com/conf/hhvm.gpg.key state=present

    - name: add hhvm deb repository
      apt_repository: repo='deb http://dl.hhvm.com/ubuntu trusty main' state=present

    - name: install hhvm packages
      apt: pkg={{ item }} state=latest update_cache=yes force=yes
      with_items:
          - hhvm-fastcgi

    - name: install fast-cgi
      shell: /usr/share/hhvm/install_fastcgi.sh

    - name: restart service hhvm
      service: name=hhvm state=restarted

    - name: be sure hhvm is running and enabled.
      service: name=hhvm state=running enabled=yes

    - name: alternatives link created
      alternatives: name=php link=/usr/bin/php path=/usr/bin/hhvm

    - name: Install php-fpm and deps 
      apt: name={{ item }} state=present
      with_items:
        - software-properties-common
        - python-software-properties
        - php5-cli
        - php5-fpm
        - php5-mcrypt
        - php5-imagick
        - php5-curl
        - php5-gd
        - php5-mysql
        - php5-xmlrpc

    - name: Download Wordpress
      get_url: url=http://wordpress.org/latest.tar.gz dest=/tmp/wp-latest.tar.gz
    
    - name: Extract archive
      command: /bin/tar xvf /tmp/wp-latest.tar.gz -C /srv/
    
    - name: Add group "wordpress"
      group: name=wordpress
    
    - name: Add user "wordpress"
      user: name=wordpress group=wordpress home=/srv/wordpress/

    - name: Change ownership of Wordpress installation
      file: path=/srv/wordpress/ owner=wordpress group=wordpress state=directory recurse=yes

    - name: Modify default nginx site for wordpress - PHP files
      replace:
        dest: "/etc/nginx/sites-available/default"
        regexp: '^\tindex index.html index.htm index.nginx-debian.html;'
        replace: '        index index.html index.htm index.php;'
      notify: restart nginx

    - name: Modify default nginx site for wordpress - localhost
      replace:
        dest: "/etc/nginx/sites-available/default"
        regexp: '^\tserver_name _;'
        replace: '        server_name localhost;'
      notify: restart nginx

    - name: Modify default nginx site for wordpress - location stanza section
      replace:
        dest: "/etc/nginx/sites-available/default"
        regexp: '^\t\ttry_files \$uri \$uri\/ =404;'
        replace: '        try_files $uri $uri/ /index.php?q=$uri&$args;'
      notify: restart nginx

    - name: Modify default nginx site for wordpress - wordpress site location
      replace:
        dest: "/etc/nginx/sites-available/default"
        regexp: '^\troot \/var\/www\/html;'
        replace: '        root /srv/wordpress/;'
      notify: restart nginx

    - name: Fetch random salts for WordPress config
      local_action: command curl https://api.wordpress.org/secret-key/1.1/salt/
      register: "wp_salt"
      sudo: no

    - name: Check if the config already exists
      stat: path=/srv/wordpress/wp-config.php
      register: wpconfigdone_stat

    - name: /srv/wordpress/wp-config-sample.php to /srv/wordpress/wp-config.php
      command: cp -p /srv/wordpress/wp-config-sample.php /srv/wordpress/wp-config.php
      when: wpconfigdone_stat.stat.exists == False

    - name: Modify Wordpress config file - delete line
      lineinfile:
        dest: "/srv/wordpress/wp-config.php"
        regexp: '.*define.*(SECURE_AUTH_KEY|LOGGED_IN_KEY|NONCE_KEY|AUTH_SALT|SECURE_AUTH_SALT|LOGGED_IN_SALT|NONCE_SALT).*put your unique phrase here.*'
        state: absent

    - name: Modify Wordpress config file - insert new WP Salts
      replace:
        dest: "/srv/wordpress/wp-config.php"
        regexp: 'define..AUTH_KEY.*put your unique phrase here.*'
        replace: "{{ wp_salt.stdout }}"
    
    - name: Modify Wordpress config file - db_name
      replace:
        dest: "/srv/wordpress/wp-config.php"
        regexp: 'database_name_here'
        replace: "{{ dbname }}"

    - name: Modify Wordpress config file - db_user
      replace:
        dest: "/srv/wordpress/wp-config.php"
        regexp: 'username_here'
        replace: "{{ username }}"

    - name: Modify Wordpress config file - db_password
      replace:
        dest: "/srv/wordpress/wp-config.php"
        regexp: 'password_here'
        replace: "{{ password }}"

    - name: Get RDS instance info
      command: "aws rds describe-db-instances --db-instance-identifier {{ prefix }}-mysql-1 --query 'DBInstances[0].Endpoint.Address' --output text"
      register: rds_instance_info
      connection: local
      changed_when: False

    - name: Modify Wordpress config file - db_host
      replace:
        dest: "/srv/wordpress/wp-config.php"
        regexp: 'localhost'
        replace: "{{ rds_instance_info.stdout }}"

  handlers:    
    - name: restart nginx
      service: name=nginx state=restarted
  
